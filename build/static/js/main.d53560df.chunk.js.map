{"version":3,"sources":["components/Note.js","services/Notes.js","App.js","reportWebVitals.js","index.js"],"names":["Note","note","toggleImportant","label","important","className","content","style","background","color","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","divStyle","display","alignItems","justifyContent","class","width","height","borderRadius","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","returnedNote","concat","value","onChange","target","type","columns","map","find","n","changedNote","catch","error","setTimeout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d53560df.chunk.js","sourcesContent":["import React from 'react'\r\nconst Note = ({ note, toggleImportant }) => {\r\n  const label = note.important\r\n  ? 'make not important' : 'make important'\r\n  \r\n    if (note.important){\r\n      return(\r\n    <li className='noteImportant'>\r\n      <div>\r\n      <h2>{note.content}</h2>\r\n      <div>\r\n        <button style={{background: 'darkred', color:'white'}} onClick={toggleImportant}>{label}</button>  \r\n      </div>\r\n      </div>\r\n    </li>)\r\n    }else{\r\n      return(<li className='note'>\r\n      <div>\r\n      <h2>{note.content}</h2>\r\n      <div>\r\n        <button style={{background: 'darkgreen'}} onClick={toggleImportant}>{label}</button>  \r\n      </div>\r\n      </div>\r\n    </li>)\r\n    }\r\n  \r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll,  create, update }","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Note from './components/Note'\nimport noteService from './services/Notes'\nimport './index.css'\nimport Notification from './components/Notification'\n\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error')\n\n  useEffect(() => {\n    noteService\n    .getAll()\n    .then(initialNotes => {\n      setNotes(initialNotes)\n    })\n  }, [])\n  console.log('render', notes.length, 'notes')\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportant = (id) => {\n    console.log(`importance of ${id} needs to be toggled`)  \n    const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(n => n.id===id)\n    const changedNote = {...note,important: !note.important}\n    noteService\n    .update(id ,changedNote)\n    .then(returnedNote => {\n      setNotes(notes.map(note=> note.id !== id ? note : returnedNote))\n    })\n    .catch(error =>{\n      setErrorMessage(\n        `Note '${note.content}' was already removed from server`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    })\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length +1,\n    }\n    noteService.create(noteObject)\n    .then(returnedNote => {\n      setNotes(notes.concat(returnedNote))\n      setNewNote('')\n    })\n\n  }\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n  const divStyle = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  };\n  const noteStyle = {\n      columns: 2,\n  }\n  const buttonStyle ={\n    color: 'green',\n    width: '10rem',\n    height: '5rem',\n    borderRadius: '8px',\n  };\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div class=\"row\">\n  </div>\n      {/* <Notification  message={errorMessage} /> */}\n     \n      <div style={divStyle}>\n        <button style={buttonStyle} onClick={()=> setShowAll(!showAll)}>\n          Show {showAll ? 'only important' : 'all'} notes\n        </button>\n      </div> \n      <h3 style={divStyle}>Add a Note!</h3>\n      <form style={divStyle} onSubmit={addNote}>\n        <input \n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n      <div style={divStyle}>\n      <ul style={noteStyle}>\n        {notesToShow.map(note => \n            <Note \n            key={note.id} \n            note={note}\n            toggleImportant={()=>toggleImportant(note.id)} />\n        )}\n      </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}